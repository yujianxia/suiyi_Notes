(window.webpackJsonp=window.webpackJsonp||[]).push([[190],{586:function(t,a,v){"use strict";v.r(a);var _=v(25),s=Object(_.a)({},(function(){var t=this,a=t.$createElement,v=t._self._c||a;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"第13天-说说你对javascript的作用域的理解"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#第13天-说说你对javascript的作用域的理解"}},[t._v("#")]),t._v(" 第13天 说说你对javascript的作用域的理解")]),t._v(" "),v("h2",{attrs:{id:"总结"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),v("h3",{attrs:{id:"全局作用域"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#全局作用域"}},[t._v("#")]),t._v(" 全局作用域")]),t._v(" "),v("p",[t._v("这个没啥说的，就是在顶层环境中申明的变量都是全局作用域，他们的属性其实都在window对象下面。")]),t._v(" "),v("h3",{attrs:{id:"函数作用域"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#函数作用域"}},[t._v("#")]),t._v(" 函数作用域")]),t._v(" "),v("p",[t._v("在函数内部定义的变量都是函数作用域，只能在函数中访问到，当然也可以通过闭包来访问。除此之外，在其他地方是没法访问函数内部的变量的。")]),t._v(" "),v("h3",{attrs:{id:"局部作用域"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#局部作用域"}},[t._v("#")]),t._v(" 局部作用域")]),t._v(" "),v("p",[v("code",[t._v("es6")]),t._v("中新增的特性，弥补了以前只能使用匿名及时运行函数来创建局部变量的缺陷。使用很简单，直接用"),v("code",[t._v("let")]),t._v("来申明变量就行。也可以使用"),v("code",[t._v("const")]),t._v("来申明变量，表明这是常数。")]),t._v(" "),v("h3",{attrs:{id:"作用域链"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#作用域链"}},[t._v("#")]),t._v(" 作用域链")]),t._v(" "),v("p",[t._v("要说清这个，需要首先明白"),v("code",[t._v("javascript")]),t._v("的代码运行过程。假设现在有个函数"),v("code",[t._v("funcA")]),t._v("，在该函数内部申明了一个局部变量a，在函数内部又定义了一个函数"),v("code",[t._v("funcB")]),t._v("，在函数B中申明了变量b。如下：")]),t._v(" "),v("div",{staticClass:"language-js line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-js"}},[v("code",[v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("funcA")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("funcB")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" b"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[t._v("1")]),v("br"),v("span",{staticClass:"line-number"},[t._v("2")]),v("br"),v("span",{staticClass:"line-number"},[t._v("3")]),v("br"),v("span",{staticClass:"line-number"},[t._v("4")]),v("br"),v("span",{staticClass:"line-number"},[t._v("5")]),v("br"),v("span",{staticClass:"line-number"},[t._v("6")]),v("br")])]),v("p",[t._v("当进入"),v("code",[t._v("funcA")]),t._v("时，这时候会把变量"),v("code",[t._v("a")]),t._v("压入当前的作用域"),v("code",[t._v("A")]),t._v("中，并且将作用域"),v("code",[t._v("A")]),t._v("入栈，当进入"),v("code",[t._v("funcB")]),t._v("时，则会把变量"),v("code",[t._v("b")]),t._v("压入当前的作用域"),v("code",[t._v("B")]),t._v("中，并且将作用域"),v("code",[t._v("B")]),t._v("入栈，那么这时候栈中就有了作用域"),v("code",[t._v("A")]),t._v("和作用域"),v("code",[t._v("B")]),t._v("，当在"),v("code",[t._v("funcB")]),t._v("中查找某个变量时，会先从当前的作用域"),v("code",[t._v("B")]),t._v("中查找，如果没有的话，那么就根据栈中的作用域依次往上查找，这就是作用域链。")]),t._v(" "),v("h2",{attrs:{id:"补充"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#补充"}},[t._v("#")]),t._v(" 补充")]),t._v(" "),v("ol",[v("li",[v("p",[t._v("js是使用的词法作用域，所以当代码被加载时作用域已经被限定。")])]),t._v(" "),v("li",[v("p",[t._v("作用域只会引用当前作用域用到的 上层作用域的变量 其他没用到的将会随该函数一起推出调用栈")])])]),t._v(" "),v("h2",{attrs:{id:"另一种说法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#另一种说法"}},[t._v("#")]),t._v(" 另一种说法")]),t._v(" "),v("h3",{attrs:{id:"作用域"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#作用域"}},[t._v("#")]),t._v(" 作用域")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("作用域是一组规则，决定了一个变量（标识符）在哪里和如何被查找。")])]),t._v(" "),v("li",[v("p",[t._v("查找变量用于赋值，变量是一个 "),v("code",[t._v("LHS")]),t._v("（左手边）引用；查找变量用于取值，变量是一个 "),v("code",[t._v("RHS")]),t._v("（右手边）引用。")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("LHS")]),t._v(" 和 "),v("code",[t._v("RHS")]),t._v(" 引用查询都从当前执行中的作用域开始，它们会在嵌套的作用域中一路向上，一次一个作用域（层）地查找这个标识符，直到它们到达全局作用域（顶层）并停止，既可能找到也可能没找到。")])]),t._v(" "),v("li",[v("p",[t._v("未找到的 "),v("code",[t._v("RHS")]),t._v(" 引用会导致 "),v("code",[t._v("ReferenceError")]),t._v(" 被抛出。")])]),t._v(" "),v("li",[v("p",[t._v("未找到的 "),v("code",[t._v("LHS")]),t._v(" 引用会导致一个自动的，隐含地创建的同名全局变量（如果不是“Strict模式”），或者一个 "),v("code",[t._v("ReferenceError")]),t._v("（“Strict模式”）。")])])]),t._v(" "),v("h3",{attrs:{id:"词法作用域"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#词法作用域"}},[t._v("#")]),t._v(" 词法作用域")]),t._v(" "),v("p",[t._v("js采用词法作用域，意味着作用域是由编写时函数被声明的位置决定。编译器的词法分析阶段实质上可以知道所有的标识符是在哪里和如何声明的，并在执行期间预测它们将如何被查询。（例外是"),v("code",[t._v("eval()")]),t._v(","),v("code",[t._v("with")]),t._v("，不推荐使用）")]),t._v(" "),v("h3",{attrs:{id:"函数作用域和块作用域"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#函数作用域和块作用域"}},[t._v("#")]),t._v(" 函数作用域和块作用域")]),t._v(" "),v("p",[t._v("在 "),v("code",[t._v("JavaScript")]),t._v(" 中函数是最常见的作用域单位。在另一个函数内部声明的变量和函数，实质上对任何外围“作用域”都是“隐藏的”，这是优秀软件的一个有意的设计原则。")]),t._v(" "),v("p",[t._v("但是函数绝不是唯一的作用域单位。块儿作用域指的是这样一种想法：变量和函数可以属于任意代码块（一般来说，就是任意的 { .. }。")]),t._v(" "),v("p",[t._v("从 "),v("code",[t._v("ES3")]),t._v(" 开始，"),v("code",[t._v("try")]),t._v("/"),v("code",[t._v("catch")]),t._v(" 结构在 "),v("code",[t._v("catch")]),t._v(" 子句上拥有块儿作用域。")]),t._v(" "),v("p",[t._v("在 "),v("code",[t._v("ES6")]),t._v(" 中，引入了 "),v("code",[t._v("let")]),t._v(" 关键字（"),v("code",[t._v("var")]),t._v(" 关键字的表兄弟）允许在任意代码块中声明变量。"),v("code",[t._v("if (..) { let a = 2; }")]),t._v(" 将会声明变量 "),v("code",[t._v("a")]),t._v("，而它实质上劫持了 "),v("code",[t._v("if")]),t._v(" 的 "),v("code",[t._v("{ .. }")]),t._v(" 块儿的作用域，并将自己附着在这里。")])])}),[],!1,null,null,null);a.default=s.exports}}]);