(window.webpackJsonp=window.webpackJsonp||[]).push([[201],{599:function(v,_,t){"use strict";t.r(_);var e=t(25),s=Object(e.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"第23天-0-1-0-2、0-1-0-3和0-1-0-2分别等于多少-并解释下为什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第23天-0-1-0-2、0-1-0-3和0-1-0-2分别等于多少-并解释下为什么"}},[v._v("#")]),v._v(" 第23天 0.1 + 0.2、0.1 + 0.3和0.1 * 0.2分别等于多少？并解释下为什么？")]),v._v(" "),t("h2",{attrs:{id:"思路一"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#思路一"}},[v._v("#")]),v._v(" 思路一")]),v._v(" "),t("p",[v._v("用一句话概括就是：")]),v._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[v._v("EcmaScrpt规范定义Number的类型遵循了IEEE754-2008中的64位浮点数规则定义的小数后的有效位数至多为52位导致计算出现精度丢失问题！\n")])]),v._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[v._v("1")]),t("br")])]),t("p",[v._v("这个问题也算是经常遇到的面试题之一了，楼上说的对，简单来说就是js中采用IEEE754的双精度标准，因为精度不足导致的问题，比如二进制表示0.1时这这样表示"),t("code",[v._v("1001100110011...")]),v._v("(0011无线循环)，那么这些循环的数字被js裁剪后，就会出现精度丢失的问题，也就造成了"),t("code",[v._v("0.1")]),v._v("不再是"),t("code",[v._v("0.1 了")]),v._v("，而是变成了 "),t("code",[v._v("0.100000000000000002")]),v._v("\n我们可以来测试一下：")]),v._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[v._v("0.100000000000000002 === 0.1//true\n")])]),v._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[v._v("1")]),t("br")])]),t("p",[v._v("那么同样的，0.2 在二进制也是无限循环的，被裁剪后也失去了精度变成了 "),t("code",[v._v("0.200000000000000002")]),v._v(":")]),v._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[v._v("0.200000000000000002 === 0.2 // true\n")])]),v._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[v._v("1")]),t("br")])]),t("p",[v._v("由此我们可以得出:")]),v._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[v._v("0.1 + 0.2 === 0.30000000000000004//true\n")])]),v._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[v._v("1")]),t("br")])]),t("p",[v._v("所以自然"),t("code",[v._v("0.1+0.2!=0.3")]),v._v("。\n那么如何解决这个问题；使用原生最简单的方法:")]),v._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[v._v("\nparseFloat((0.1+0.2).toFixed(10)) === 0.3//true\n")])]),v._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[v._v("1")]),t("br"),t("span",{staticClass:"line-number"},[v._v("2")]),t("br")])]),t("p",[v._v("参考：\n深度剖析0.1 +0.2===0.30000000000000004的原因：https://www.jianshu.com/p/d6b81e4e25e3")]),v._v(" "),t("h2",{attrs:{id:"思路二"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#思路二"}},[v._v("#")]),v._v(" 思路二")]),v._v(" "),t("p",[v._v("先说结果：")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://picgo-ali.oss-cn-beijing.aliyuncs.com/img/20200731152004.png",alt:"image-20200731152004358"}})]),v._v(" "),t("p",[v._v("之所以会出现"),t("code",[v._v("0.1 + 0.2 != 0.3")]),v._v("这种问题，原因在于我们现实世界中使用十进制来表示数字，但是计"),t("strong",[v._v("算机中只能使用二进制来表示数字")]),v._v("，小数也是用二进制来表示。JavaScript存储二进制数据也是有限度的，正如在现实中我们无法写下一个无限循环的小数一样，只能写个近似数。")]),v._v(" "),t("p",[v._v("说的再简单些：")]),v._v(" "),t("p",[v._v("我们可以把计算机转换二进制存储的过程类比成下面的问题：")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://picgo-ali.oss-cn-beijing.aliyuncs.com/img/20200731152004.png",alt:"image-20200731152004358"}})]),v._v(" "),t("p",[v._v("当我们把"),t("code",[v._v("1")]),v._v("除以"),t("code",[v._v("3")]),v._v("得到的"),t("code",[v._v("0.333")]),v._v("结果再进行相加，永远加不到"),t("code",[v._v("1")]),v._v("。")]),v._v(" "),t("h4",{attrs:{id:"javascript存储数字的标准"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#javascript存储数字的标准"}},[v._v("#")]),v._v(" "),t("code",[v._v("JavaScript")]),v._v("存储数字的标准")]),v._v(" "),t("p",[t("code",[v._v("JavaScript")]),v._v("采用了"),t("code",[v._v("IEEE754")]),v._v("标准来规定数字。在"),t("code",[v._v("IEEE754")]),v._v("标准中，又分为以下几种标准：")]),v._v(" "),t("ul",[t("li",[t("s",[v._v("单精度")])]),v._v(" "),t("li",[v._v("双精度（64位）")]),v._v(" "),t("li",[t("s",[v._v("延伸单精度")])]),v._v(" "),t("li",[t("s",[v._v("延伸双精度")])])]),v._v(" "),t("p",[t("code",[v._v("Javascript")]),v._v("中采用的是双精度标准来表示数字，64位的意思就是由"),t("code",[v._v("0")]),v._v("或者"),t("code",[v._v("1")]),v._v("组成这64位，从而表示出一个二进制的数字。")]),v._v(" "),t("p",[v._v("在这64位数字中，并不是"),t("code",[v._v("0")]),v._v("和"),t("code",[v._v("1")]),v._v("随意地排列组合，"),t("code",[v._v("IEEE754")]),v._v("标准把这64位分成了三个部分")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://picgo-ali.oss-cn-beijing.aliyuncs.com/img/20200731122804.png",alt:"image-20200731122803946"}})]),v._v(" "),t("p",[v._v("可能现在还不能理解为何要这样划分，接着往下看。")]),v._v(" "),t("h4",{attrs:{id:"计算机如何存储数字"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#计算机如何存储数字"}},[v._v("#")]),v._v(" 计算机如何存储数字")]),v._v(" "),t("p",[v._v("在研究计算机是如何存储数字前，我们先来回顾一下科学计数法：")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://picgo-ali.oss-cn-beijing.aliyuncs.com/img/20200731123301.png",alt:"image-20200731123300874"}})]),v._v(" "),t("p",[v._v("对于一个非常大的数字来说，我们可以通过科学计数法来表示：例如"),t("code",[v._v("666000")]),v._v("可以被表示为"),t("code",[v._v("6.66 x 10^5")]),v._v("，这样我们就可以只存储一个有效数字"),t("code",[v._v("6.66")]),v._v("，然后记住它的指数位上的数字"),t("code",[v._v("5")]),v._v("，通过这两个简单的数字来表示一个非常大的数字。")]),v._v(" "),t("p",[v._v("计算机也采用这种方式来存储数字，不过存储的是二进制的。例如：")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://picgo-ali.oss-cn-beijing.aliyuncs.com/img/20200731143025.png",alt:"image-20200731143025293"}})]),v._v(" "),t("h4",{attrs:{id:"进制转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#进制转换"}},[v._v("#")]),v._v(" 进制转换")]),v._v(" "),t("h5",{attrs:{id:"tostring-方法实现进行转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tostring-方法实现进行转换"}},[v._v("#")]),v._v(" "),t("code",[v._v("toString()方法")]),v._v("实现进行转换")]),v._v(" "),t("p",[v._v("这里由于篇幅限制，不具体讲解进制转换的问题。")]),v._v(" "),t("p",[v._v("既然我们说在计算机中是通过二进制来表示数字的，我们先把"),t("code",[v._v("0.1")]),v._v("和"),t("code",[v._v("0.2")]),v._v("转换成二进制来看一下。如何在JavaScript中进行进制的转换呢？")]),v._v(" "),t("p",[v._v("答案是："),t("code",[v._v("toString()")]),v._v("方法")]),v._v(" "),t("p",[v._v("不要只认为"),t("code",[v._v("toString()")]),v._v("方法是将一个值转换成字符串的，通过向该方法中传入"),t("code",[v._v("基数")]),v._v("参数，"),t("code",[v._v("toString()")]),v._v("可以输出以"),t("code",[v._v("二进制")]),v._v("、"),t("code",[v._v("八进制")]),v._v("、"),t("code",[v._v("十六进制")]),v._v("，乃至其他任意有效进制格式表示的"),t("strong",[v._v("字符串值")]),v._v("。")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://picgo-ali.oss-cn-beijing.aliyuncs.com/img/20200731121235.png",alt:"image-20200731121235195"}})]),v._v(" "),t("h5",{attrs:{id:"手动将十进制小数转换为二进制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#手动将十进制小数转换为二进制"}},[v._v("#")]),v._v(" 手动将十进制小数转换为二进制")]),v._v(" "),t("p",[v._v("直接用"),t("code",[v._v("toString()")]),v._v("方法得到出的好像并不是一个无限循环的二进制数，那为什么图中标明了"),t("code",[v._v("‘0110’循环")]),v._v("呢？我们手动计算一下，应该就知道了。")]),v._v(" "),t("p",[v._v('十进制小数转换成二进制小数采用"'),t("strong",[v._v("乘2取整，顺序排列")]),v._v('"法。')]),v._v(" "),t("p",[v._v("具体做法是：")]),v._v(" "),t("ul",[t("li",[v._v("用2乘十进制小数，可以得到积，将积的整数部分取出；")]),v._v(" "),t("li",[v._v("再用2乘余下的"),t("strong",[v._v("小数")]),v._v(" 部分，又得到一个积，再将积的整数部分取出；")]),v._v(" "),t("li",[v._v("如此进行，"),t("strong",[v._v("直到积中的小数部分为零")]),v._v("，或者达到所要求的精度为止；")]),v._v(" "),t("li",[v._v("然后把取出的整数部分按顺序排列起来，先取的整数作为二进制小数的高位有效位，后取的整数作为低位有效位。")])]),v._v(" "),t("p",{staticStyle:{"font-size":"20px",color:"red","font-weight":"bold"}},[v._v("十进制0.1")]),v._v(" "),t("p",[v._v("0.1 * 2 = "),t("span",{staticStyle:{color:"red"}},[v._v("0")]),v._v(".2，整数部分是"),t("span",{staticStyle:{color:"red"}},[v._v("0")])]),t("p"),t("p",[v._v("0.2 * 2 = "),t("span",{staticStyle:{color:"red"}},[v._v("0")]),v._v(".4，整数部分是"),t("span",{staticStyle:{color:"red"}},[v._v("0")])]),t("p"),t("p",[v._v("0.4 * 2 = "),t("span",{staticStyle:{color:"red"}},[v._v("0")]),v._v(".8，整数部分是"),t("span",{staticStyle:{color:"red"}},[v._v("0")])]),t("p"),t("p",[v._v("0.8 * 2 = "),t("span",{staticStyle:{color:"red"}},[v._v("1")]),v._v(".6，整数部分是"),t("span",{staticStyle:{color:"red"}},[v._v("1")])]),t("p"),t("p",[v._v("0.6 * 2 = "),t("span",{staticStyle:{color:"red"}},[v._v("1")]),v._v(".2，整数部分是"),t("span",{staticStyle:{color:"red"}},[v._v("1")])]),t("p"),t("p",[v._v("0.2 * 2 = "),t("span",{staticStyle:{color:"red"}},[v._v("0")]),v._v(".4，整数部分是"),t("span",{staticStyle:{color:"red"}},[v._v("0")])]),t("p",[v._v("\n...\n")]),t("p",{staticStyle:{"font-size":"20px",color:"red","font-weight":"bold"}},[v._v("十进制0.1→二进制0.000110011→二进制科学记数法：1.10011 * 2"),t("sup",[v._v("-4")])]),v._v(" "),t("p",[v._v("从上面的计算过程，可以发现，整数部分从0.4那里开始循环，得到的值永远都是一个小数，结果是一个无限循环的数。因此，只能取一个近似数来表示。（这样的话，就会存在精度丢失了）")]),v._v(" "),t("p",{staticStyle:{"font-size":"20px",color:"red","font-weight":"bold"}},[v._v("十进制0.2")]),v._v(" "),t("p",[v._v("0.2 * 2 = "),t("span",{staticStyle:{color:"red"}},[v._v("0")]),v._v(".4，整数部分是"),t("span",{staticStyle:{color:"red"}},[v._v("0")])]),t("p"),t("p",[v._v("0.4 * 2 = "),t("span",{staticStyle:{color:"red"}},[v._v("0")]),v._v(".8，整数部分是"),t("span",{staticStyle:{color:"red"}},[v._v("0")])]),t("p"),t("p",[v._v("0.8 * 2 = "),t("span",{staticStyle:{color:"red"}},[v._v("1")]),v._v(".6，整数部分是"),t("span",{staticStyle:{color:"red"}},[v._v("1")])]),t("p"),t("p",[v._v("0.6 * 2 = "),t("span",{staticStyle:{color:"red"}},[v._v("1")]),v._v(".2，整数部分是"),t("span",{staticStyle:{color:"red"}},[v._v("1")])]),t("p"),t("p",[v._v("0.2 * 2 = "),t("span",{staticStyle:{color:"red"}},[v._v("0")]),v._v(".4，整数部分是"),t("span",{staticStyle:{color:"red"}},[v._v("0")])]),t("p"),t("p",[v._v("0.4 * 2 = "),t("span",{staticStyle:{color:"red"}},[v._v("0")]),v._v(".8，整数部分是"),t("span",{staticStyle:{color:"red"}},[v._v("0")])]),t("p"),t("p",[v._v("0.8 * 2 = "),t("span",{staticStyle:{color:"red"}},[v._v("1")]),v._v(".6，整数部分是"),t("span",{staticStyle:{color:"red"}},[v._v("1")])]),t("p"),t("p",[v._v("0.6 * 2 = "),t("span",{staticStyle:{color:"red"}},[v._v("1")]),v._v(".2，整数部分是"),t("span",{staticStyle:{color:"red"}},[v._v("1")])]),t("p"),t("p",[v._v("0.2 * 2 = "),t("span",{staticStyle:{color:"red"}},[v._v("0")]),v._v(".4，整数部分是"),t("span",{staticStyle:{color:"red"}},[v._v("0")])]),t("p",[v._v("\n...\n")]),t("p",{staticStyle:{"font-size":"20px",color:"red","font-weight":"bold"}},[v._v("十进制0.2→二进制0.001100110→二进制科学记数法：1.10011 * 2"),t("sup",[v._v("-3")])]),v._v(" "),t("p",[v._v("计算十进制小数0.2也是如此，会发现无限循环，因此只能取一个近似数来代替（同样会发生精度丢失）")]),v._v(" "),t("p",[v._v("因为这两个十进制的小数转换成二进制的小数后，是一个无限循环的数，因此用"),t("code",[v._v("IEEE754")]),v._v("标准来表示数字的话肯定会出现后续的位置无法存储的问题。")]),v._v(" "),t("p",[v._v("因此指数位只有11位，有效数只有52位。有效数部分只能存储52个数字，这样就迫使计算机取一个近似的数字。那么"),t("code",[v._v("0.1")]),v._v("和"),t("code",[v._v("0.2")]),v._v("相加以后再转换成十进制就已经不再是纯正的"),t("code",[v._v("0.3")]),v._v("了。")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://picgo-ali.oss-cn-beijing.aliyuncs.com/img/20200731154413.png",alt:"image-20200731154413062"}})]),v._v(" "),t("h4",{attrs:{id:"解决方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解决方法"}},[v._v("#")]),v._v(" 解决方法")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://picgo-ali.oss-cn-beijing.aliyuncs.com/img/20200731114240.png",alt:"image-20200731114240040"}})]),v._v(" "),t("p",[v._v("幸运的是"),t("code",[v._v("0.1")]),v._v("加"),t("code",[v._v("0.2")]),v._v("得出的这个近似"),t("code",[v._v("0.3")]),v._v("的数不后面很多个"),t("code",[v._v("0")]),v._v("以后才出现"),t("code",[v._v("4")]),v._v("这个数字，因此有多种方法，可以将结果“修正”为正确答案")]),v._v(" "),t("h5",{attrs:{id:"tofixed-方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tofixed-方法"}},[v._v("#")]),v._v(" "),t("code",[v._v("toFixed()")]),v._v("方法")]),v._v(" "),t("p",[v._v("我们可以使用"),t("code",[v._v("toFixed()")]),v._v("方法将相加的结果保留指定位置的小数，例如，这里保留了5位小数。"),t("code",[v._v("toFixed()")]),v._v("方法的结果是一个字符串，可以利用"),t("code",[v._v("parseInt()")]),v._v("或者"),t("code",[v._v("parseFloat()")]),v._v("方法将字符串转换为数值。这里由于最终结果应该是一个小数，因此使用"),t("code",[v._v("parseFloat()")]),v._v("方法。")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://picgo-ali.oss-cn-beijing.aliyuncs.com/img/20200731155049.png",alt:"image-20200731155049649"}}),v._v("\n个人能力有限，如有错误，敬请指正！\n补充两篇文章：\n"),t("a",{attrs:{href:"https://www.barretlee.com/blog/2016/09/28/ieee754-operation-in-js/",target:"_blank",rel:"noopener noreferrer"}},[v._v("揭秘 0.1 + 0.2 != 0.3"),t("OutboundLink")],1),v._v(" "),t("a",{attrs:{href:"https://blog.huoding.com/2019/08/23/769",target:"_blank",rel:"noopener noreferrer"}},[v._v("为什么「0.1+0.2!=0.3」，而「0.1+0.3==0.4"),t("OutboundLink")],1)]),v._v(" "),t("h2",{attrs:{id:"思路三"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#思路三"}},[v._v("#")]),v._v(" 思路三")]),v._v(" "),t("p",[t("strong",[v._v("为什么「0.1+0.2!=0.3」，而「0.1+0.3==0.4」")])]),v._v(" "),t("p",[v._v("首先，让我们举一个整数的例子，比如：")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("十进制「13」：1*(10\b^1) + 3(10^0) = 10 + 3 = 13")])]),v._v(" "),t("li",[t("p",[v._v("二进制「1101」：1*(2^3) + 1*(2^2) + 0*(2^1) + 1*(2^0) = 8 + 4 + 0 + 1 = 13")])])]),v._v(" "),t("p",[v._v("接着，让我们再举一个小数的例子，比如：")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("十进制「0.625」：6*(10^-1) + 2*(10^-2) + 5*(10^-3) = 0.625")])]),v._v(" "),t("li",[t("p",[v._v("二进制「0.101」：1*(2^-1) + 0*(2^-2) + 1*(2^-3) = 5/8 = 0.625")])])]),v._v(" "),t("p",[v._v("最重要的一点是你要明白计算机是如何表示小数的：比如二进制的"),t("code",[v._v("「0.1111111」")]),v._v("，无非就是十进制的"),t("code",[v._v("「1/2 + 1/4 + 1/8 + 1/16 + 1/32 + 1/64 + 1/128」")]),v._v("，不过细心的你可能已经发现问题了，计算机这种处理小数的方式存在精度损失的，比如一个十进制的"),t("code",[v._v("「0.1」")]),v._v("，换算成分数的话就是十进制的"),t("code",[v._v("「1/10」")]),v._v("，对比前面的结果，你会发现计算机没办法精确表示它，只能近似等于二进制的"),t("code",[v._v("「0.00011」")]),v._v("，也就是十进制的"),t("code",[v._v("「1/16 + 1/32 = 3/32」")]),v._v("，当然二进制小数点后可以多取几位，可惜结果是只能无限趋近，但永远不可能等于。")]),v._v(" "),t("p",[v._v("下面看看为什么"),t("code",[v._v("「0.1 + 0.2 != 0.3」")]),v._v("，而"),t("code",[v._v("「0.1 + 0.3 == 0.4」")]),v._v("。既然存在精度损失，那么"),t("code",[v._v("「0.1 + 0.2 != 0.3」")]),v._v("也说得过去，我们推算一下为什么"),t("code",[v._v("「0.1 + 0.3 == 0.4」")]),v._v("：")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("十进制的"),t("code",[v._v("「0.1」")]),v._v("近似等于二进制"),t("code",[v._v("「0.00011」")])])]),v._v(" "),t("li",[t("p",[v._v("十进制的"),t("code",[v._v("「0.3」")]),v._v("近似等于二进制"),t("code",[v._v("「0.01001」")])])]),v._v(" "),t("li",[t("p",[v._v("十进制的"),t("code",[v._v("「0.4」")]),v._v("近似等于二进制"),t("code",[v._v("「0.01100」")])])])]),v._v(" "),t("p",[v._v("于是，十进制的"),t("code",[v._v("「0.1 + 0.3」")]),v._v("也就是二进制的"),t("code",[v._v("「0.00011 + 0.01001」")]),v._v("：")]),v._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[v._v("  "),t("span",{pre:!0,attrs:{class:"token number"}},[v._v("0.00011")]),v._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("+")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[v._v("0.01001")]),v._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("--")]),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("--")]),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("--")]),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("--")]),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("-")]),v._v("\n  "),t("span",{pre:!0,attrs:{class:"token number"}},[v._v("0.01100")]),v._v("\n")])]),v._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[v._v("1")]),t("br"),t("span",{staticClass:"line-number"},[v._v("2")]),t("br"),t("span",{staticClass:"line-number"},[v._v("3")]),t("br"),t("span",{staticClass:"line-number"},[v._v("4")]),t("br")])]),t("p",[v._v("不多不少，答案正好是 "),t("code",[v._v("0.4！")]),v._v("也就是说，虽然有精度损失，但是刚刚好碰巧抵消了彼此的误差。")])])}),[],!1,null,null,null);_.default=s.exports}}]);