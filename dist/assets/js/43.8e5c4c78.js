(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{405:function(t,s,e){"use strict";e.r(s);var a=e(25),n=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"render"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#render"}},[t._v("#")]),t._v(" "),e("strong",[t._v("render")])]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("ReactDOM"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("APP")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" document"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'root'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("React 应用想在容器中渲染出一个组件，这通常也是一个 React 应用的入口代码，接下来就来梳理整个 "),e("code",[t._v("render")]),t._v(" 的流程")]),t._v(" "),e("p",[t._v("先定位到 "),e("strong",[t._v("ReactDOM.js")]),t._v(" 文件的第 702 行代码")]),t._v(" "),e("p",[e("a",{attrs:{"data-fancybox":"",title:"源代码",href:"/notes/assets/reactIloveDeveplo/2019-06-01-032240.png"}},[e("img",{attrs:{src:"/notes/assets/reactIloveDeveplo/2019-06-01-032240.png",alt:"源代码"}})])]),t._v(" "),e("p",[t._v("这部分代码其实没啥好说的，唯一需要注意的是在调用 "),e("code",[t._v("legacyRenderSubtreeIntoContainer")]),t._v(" 函数时写死了第四个参数 "),e("code",[t._v("forceHydrate")]),t._v(" 为 "),e("code",[t._v("false")]),t._v("。这个参数为 "),e("code",[t._v("true")]),t._v(" 时表明了是服务端渲染，因为分析的是客户端渲染，因此后面有关这部分的内容也不会再展开。")]),t._v(" "),e("p",[t._v("接下来进入 "),e("code",[t._v("legacyRenderSubtreeIntoContainer")]),t._v(" 函数中，这部分代码分为两块来讲。第一部分是没有 "),e("code",[t._v("root")]),t._v(" 之前首先需要创建一个 "),e("code",[t._v("root")]),t._v(" 第二部分是有 "),e("code",[t._v("root")]),t._v(" 之后的渲染流程")]),t._v(" "),e("p",[e("a",{attrs:{"data-fancybox":"",title:"源代码",href:"/notes/assets/reactIloveDeveplo/2019-06-01-032241.png"}},[e("img",{attrs:{src:"/notes/assets/reactIloveDeveplo/2019-06-01-032241.png",alt:"源代码"}})])]),t._v(" "),e("p",[t._v("一开始进来函数的时候肯定是没有 "),e("code",[t._v("root")]),t._v(" 的，因此需要去创建一个 "),e("code",[t._v("root")]),t._v("，大家可以发现这个 "),e("code",[t._v("root")]),t._v(" 对象同样也被挂载在了 "),e("code",[t._v("container._reactRootContainer")]),t._v(" 上，也就是的 DOM 容器上。 如果你手边有 React 项目的话，在控制台键入如下代码就可以看到这个 "),e("code",[t._v("root")]),t._v(" 对象了。")]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("document"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("querySelector")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#root'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_reactRootContainer\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[e("a",{attrs:{"data-fancybox":"",title:"root 对象实例",href:"/notes/assets/reactIloveDeveplo/2019-06-01-032244.png"}},[e("img",{attrs:{src:"/notes/assets/reactIloveDeveplo/2019-06-01-032244.png",alt:"root 对象实例"}})])]),t._v(" "),e("p",[t._v("可以看到 "),e("code",[t._v("root")]),t._v(" 是 "),e("code",[t._v("ReactRoot")]),t._v(" 构造函数构造出来的，并且内部有一个 "),e("code",[t._v("_internalRoot")]),t._v(" 对象，这个对象是本文接下来要重点介绍的 "),e("code",[t._v("fiber")]),t._v(" 对象。")]),t._v(" "),e("p",[e("a",{attrs:{"data-fancybox":"",title:"源代码",href:"/notes/assets/reactIloveDeveplo/2019-06-01-032245.png"}},[e("img",{attrs:{src:"/notes/assets/reactIloveDeveplo/2019-06-01-032245.png",alt:"源代码"}})])]),t._v(" "),e("p",[t._v("首先还是和上文中提到的 "),e("code",[t._v("forceHydrate")]),t._v(" 属性相关的内容，不需要管这部分，反正 "),e("code",[t._v("shouldHydrate")]),t._v(" 肯定为 "),e("code",[t._v("false")]),t._v("。")]),t._v(" "),e("p",[t._v("接下来是将容器内部的节点全部移除，一般来说都是这样写一个容器的的")]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("div id"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'root'")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("div"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("这样的形式肯定就不需要去移除子节点了，这也侧面说明了一点那就是容器内部不要含有任何的子节点。一是肯定会被移除掉，二来还要进行 DOM 操作，可能还会涉及到重绘回流等等。")]),t._v(" "),e("p",[t._v("最后就是创建了一个 "),e("code",[t._v("ReactRoot")]),t._v(" 对象并返回。接下来的内容中会看到好几个 "),e("code",[t._v("root")]),t._v("，可能会有点绕。")]),t._v(" "),e("p",[e("a",{attrs:{"data-fancybox":"",title:"源代码",href:"/notes/assets/reactIloveDeveplo/2019-06-01-032247.png"}},[e("img",{attrs:{src:"/notes/assets/reactIloveDeveplo/2019-06-01-032247.png",alt:"源代码"}})])]),t._v(" "),e("p",[t._v("在 "),e("code",[t._v("ReactRoot")]),t._v(" 构造函数内部就进行了一步操作，那就是创建了一个 "),e("code",[t._v("FiberRoot")]),t._v(" 对象，并挂载到了 "),e("code",[t._v("_internalRoot")]),t._v(" 上。"),e("strong",[t._v("和 DOM "),e("code",[t._v("树一样，fiber")]),t._v(" 也会构建出一个树结构（每个 DOM 节点一定对应着一个 "),e("code",[t._v("fiber")]),t._v(" 对象），"),e("code",[t._v("FiberRoot")]),t._v(" 就是整个 "),e("code",[t._v("fiber")]),t._v(" 树的根节点")]),t._v("，接下来的内容里将学习到关于 "),e("code",[t._v("fiber")]),t._v(" 相关的内容。这里提及一点，"),e("code",[t._v("fiber")]),t._v(" 和 Fiber 是两个不一样的东西，前者代表着数据结构，后者代表着新的架构。")]),t._v(" "),e("p",[e("a",{attrs:{"data-fancybox":"",title:"源代码",href:"/notes/assets/reactIloveDeveplo/2019-06-01-032249.png"}},[e("img",{attrs:{src:"/notes/assets/reactIloveDeveplo/2019-06-01-032249.png",alt:"源代码"}})])]),t._v(" "),e("p",[t._v("在 "),e("code",[t._v("createFiberRoot")]),t._v(" 函数内部，分别创建了两个 "),e("code",[t._v("root")]),t._v("，一个 "),e("code",[t._v("root")]),t._v(" 叫做 "),e("code",[t._v("FiberRoot")]),t._v("，另一个 "),e("code",[t._v("root")]),t._v(" 叫做 "),e("code",[t._v("RootFiber")]),t._v("，并且它们两者还是相互引用的。")]),t._v(" "),e("p",[t._v("这两个对象内部拥有着数十个属性，现在没有必要一一去了解它们各自有什么用处，在当下只需要了解少部分属性即可，其他的属性会在以后的文章中了解到它们的用处。")]),t._v(" "),e("p",[t._v("对于 "),e("code",[t._v("FiberRoot")]),t._v(" 对象来说，现在只需要了解两个属性，分别是 "),e("code",[t._v("containerInfo")]),t._v(" 及 "),e("code",[t._v("current")]),t._v("。前者代表着容器信息，也就是的 "),e("code",[t._v("document.querySelector('#root')")]),t._v("；后者指向 "),e("code",[t._v("RootFiber")]),t._v("。")]),t._v(" "),e("p",[t._v("对于 "),e("code",[t._v("RootFiber")]),t._v(" 对象来说，需要了解的属性稍微多点")]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("FiberNode")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("tag"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" WorkTag"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\tpendingProps"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" mixed"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\tkey"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" string"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\tmode"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" TypeOfMode"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stateNode "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("return "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("child "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sibling "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("effectTag "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" NoEffect"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("alternate "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br")])]),e("p",[e("code",[t._v("stateNode")]),t._v(" 上文中已经讲过了，这里就不再赘述。")]),t._v(" "),e("p",[e("code",[t._v("return")]),t._v("、"),e("code",[t._v("child")]),t._v("、"),e("code",[t._v("sibling")]),t._v(" 这三个属性很重要，它们是构成 "),e("code",[t._v("fiber")]),t._v(" 树的主体数据结构。"),e("code",[t._v("fiber")]),t._v(" 树其实是一个单链表树结构，"),e("code",[t._v("return")]),t._v(" 及 "),e("code",[t._v("child")]),t._v(" 分别对应着树的父子节点，并且父节点只有一个 "),e("code",[t._v("child")]),t._v(" 指向它的第一个子节点，即便是父节点有好多个子节点。那么多个子节点如何连接起来呢？答案是 "),e("code",[t._v("sibling")]),t._v("，每个子节点都有一个 "),e("code",[t._v("sibling")]),t._v(" 属性指向着下一个子节点，都有一个 "),e("code",[t._v("return")]),t._v(" 属性指向着父节点。这么说可能有点绕，通过图来了解一下这个 "),e("code",[t._v("fiber")]),t._v(" 树的结构。")]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("APP")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("div"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("span"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("span"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("span"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("span"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("div"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nReactDom"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("APP")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" document"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("querySelector")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#root'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br")])]),e("p",[t._v("假如说需要渲染出以上组件，那么它们对应的 "),e("code",[t._v("fiber")]),t._v(" 树应该长这样")]),t._v(" "),e("p",[e("a",{attrs:{"data-fancybox":"",title:"流程图",href:"/notes/assets/reactIloveDeveplo/2019-06-01-32250.png"}},[e("img",{attrs:{src:"/notes/assets/reactIloveDeveplo/2019-06-01-32250.png",alt:"流程图"}})])]),t._v(" "),e("p",[t._v("从图中可以看到，每个组件或者 DOM 节点都会对应着一个 "),e("code",[t._v("fiber")]),t._v(" 对象。另外你手边有 React 项目的话，也可以在控制台输入如下代码，查看 "),e("code",[t._v("fiber")]),t._v(" 树的整个结构。")]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对应着 FiberRoot")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fiber "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("querySelector")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#root'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_reactRootContainer"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_internalRoot\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])]),e("p",[t._v("另外两个属性在本文中虽然用不上，但是看源码的时候笔者觉得很有意思，就打算拿出来说一下。")]),t._v(" "),e("p",[t._v("在说 "),e("code",[t._v("effectTag")]),t._v(" 之前，先来了解下啥是 "),e("code",[t._v("effect")]),t._v("，简单来说就是 DOM 的一些操作，比如增删改，那么 "),e("code",[t._v("effectTag")]),t._v(" 就是来记录所有的 "),e("code",[t._v("effect")]),t._v(" 的，但是这个记录是通过位运算来实现的，这里 是 "),e("code",[t._v("effectTag")]),t._v(" 相关的二进制内容。")]),t._v(" "),e("p",[t._v("如果想新增一个 "),e("code",[t._v("effect")]),t._v(" 的话，可以这样写 "),e("code",[t._v("effectTag |= Update")]),t._v("；如果想删除一个 "),e("code",[t._v("effect")]),t._v(" 的话，可以这样写 "),e("code",[t._v("effectTag &= ~Update")]),t._v("。")]),t._v(" "),e("p",[t._v("最后是 "),e("code",[t._v("alternate")]),t._v(" 属性。其实在一个 React 应用中，通常来说都有两个 "),e("code",[t._v("fiebr")]),t._v(" 树，一个叫做 old tree，另一个叫做 workInProgress tree。前者对应着已经渲染好的 DOM 树，后者是正在执行更新中的 fiber tree，还能便于中断后恢复。两棵树的节点互相引用，便于共享一些内部的属性，减少内存的开销。毕竟前文说过每个组件或 DOM 都会对应着一个 "),e("code",[t._v("fiber")]),t._v(" 对象，应用很大的话组成的 "),e("code",[t._v("fiber")]),t._v(" 树也会很大，如果两棵树都是各自把一些相同的属性创建一遍的话，会损失不少的内存空间及性能。")]),t._v(" "),e("p",[t._v("当更新结束以后，workInProgress tree 会将 old tree 替换掉，这种做法称之为 double buffering，这也是性能优化里的一种做法")]),t._v(" "),e("h2",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" "),e("strong",[t._v("总结")])]),t._v(" "),e("p",[e("a",{attrs:{"data-fancybox":"",title:"示例图",href:"/notes/assets/reactIloveDeveplo/2019-06-01-032252.png"}},[e("img",{attrs:{src:"/notes/assets/reactIloveDeveplo/2019-06-01-032252.png",alt:"示例图"}})])]),t._v(" "),e("h2",{attrs:{id:"reactroot-prototype-render"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#reactroot-prototype-render"}},[t._v("#")]),t._v(" "),e("strong",[t._v("ReactRoot.prototype.render")])]),t._v(" "),e("p",[t._v("当 ReactDom.render 执行时，内部会首先判断是否已经存在 root，没有的话会去创建一个 root。")]),t._v(" "),e("blockquote",[e("p",[t._v("先定位到代码的第 592 行")])]),t._v(" "),e("p",[e("a",{attrs:{"data-fancybox":"",title:"源代码",href:"/notes/assets/reactIloveDeveplo/2019-06-01-031954.png"}},[e("img",{attrs:{src:"/notes/assets/reactIloveDeveplo/2019-06-01-031954.png",alt:"源代码"}})])]),t._v(" "),e("p",[t._v("在上述的代码中调用了 "),e("code",[t._v("unbatchedUpdates")]),t._v(" 函数，这个函数涉及到的知识其实在 React 中相当重要。")]),t._v(" "),e("p",[t._v("大家都知道多个 "),e("code",[t._v("setState")]),t._v(" 一起执行，并不会触发 React 的多次渲染。")]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 虽然 age 会变成 3，但不会触发 3 次渲染")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" age"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" age"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" age"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br")])]),e("p",[t._v("这是因为内部会将这个三次 "),e("code",[t._v("setState")]),t._v(" 优化为一次更新，术语是批量更新（batchedUpdate），在后续的内容中也能看到内部是如何处理批量更新的。")]),t._v(" "),e("p",[t._v("对于 "),e("code",[t._v("root")]),t._v(" 来说其实没必要去批量更新，所以这里调用了 "),e("code",[t._v("unbatchedUpdates")]),t._v(" 函数来告知内部不需要批量更新。")]),t._v(" "),e("p",[t._v("然后在 "),e("code",[t._v("unbatchedUpdates")]),t._v(" 回调内部判断是否存在 "),e("code",[t._v("parentComponent")]),t._v("。这一步可以假定不会存在 "),e("code",[t._v("parentComponent")]),t._v("，因为很少有人会在 "),e("code",[t._v("root")]),t._v(" 外部加上 "),e("code",[t._v("context")]),t._v(" 组件。不存在 "),e("code",[t._v("parentComponent")]),t._v(" 的话就会执行 "),e("code",[t._v("root.render(children, callback)")]),t._v("，这里的 "),e("code",[t._v("render")]),t._v(" 指的是 "),e("code",[t._v("ReactRoot.prototype.render")]),t._v("。")]),t._v(" "),e("p",[e("a",{attrs:{"data-fancybox":"",title:"源代码",href:"/notes/assets/reactIloveDeveplo/2019-06-01-031956.png"}},[e("img",{attrs:{src:"/notes/assets/reactIloveDeveplo/2019-06-01-031956.png",alt:"源代码"}})])]),t._v(" "),e("p",[t._v("在 "),e("code",[t._v("render")]),t._v(" 函数内部首先取出 "),e("code",[t._v("root")]),t._v("，这里的 "),e("code",[t._v("root")]),t._v(" 指的是 "),e("code",[t._v("FiberRoot")]),t._v("。然后创建了 "),e("code",[t._v("ReactWork")]),t._v(" 的实例，这块内容没有必要深究，功能就是为了在组件渲染或更新后把所有传入 "),e("code",[t._v("ReactDom.render")]),t._v(" 中的回调函数全部执行一遍。")]),t._v(" "),e("p",[t._v("接下来来看 "),e("code",[t._v("updateContainer")]),t._v(" 内部是怎么样的。")]),t._v(" "),e("p",[e("a",{attrs:{"data-fancybox":"",title:"源代码",href:"/notes/assets/reactIloveDeveplo/2019-06-01-031958.png"}},[e("img",{attrs:{src:"/notes/assets/reactIloveDeveplo/2019-06-01-031958.png",alt:"源代码"}})])]),t._v(" "),e("p",[t._v("先从 FiberRoot 的 "),e("code",[t._v("current")]),t._v(" 属性中取出它的 fiber 对象，然后计算了两个时间。这两个时间在 React 中相当重要，因此需要单独用一小节去学习它们。")]),t._v(" "),e("h2",{attrs:{id:"时间"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#时间"}},[t._v("#")]),t._v(" "),e("strong",[t._v("时间")])]),t._v(" "),e("p",[t._v("首先是 "),e("code",[t._v("currentTime")]),t._v("，在 "),e("code",[t._v("requestCurrentTime")]),t._v(" 函数内部计算时间的最核心函数是 "),e("code",[t._v("recomputeCurrentRendererTime")]),t._v("。")]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("recomputeCurrentRendererTime")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" currentTimeMs "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("now")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" originalStartTimeMs"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tcurrentRendererTime "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("msToExpirationTime")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("currentTimeMs"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br")])]),e("p",[e("code",[t._v("now()")]),t._v(" 就是 "),e("code",[t._v("performance.now()")]),t._v("，如果你不了解这个 API 的话可以阅读下 相关文档，"),e("code",[t._v("originalStartTimeMs")]),t._v(" 是 React 应用初始化时就会生成的一个变量，值也是 "),e("code",[t._v("performance.now()")]),t._v("，并且这个值不会在后期再被改变。那么这两个值相减以后，得到的结果也就是现在离 React 应用初始化时经过了多少时间。")]),t._v(" "),e("p",[t._v("然后需要把计算出来的值再通过一个公式算一遍，这里的"),e("code",[t._v("| 0")]),t._v("作用是取整数，也就是说"),e("code",[t._v("11 / 10 | 0 = 1")])]),t._v(" "),e("p",[e("a",{attrs:{"data-fancybox":"",title:"源代码",href:"/notes/assets/reactIloveDeveplo/2019-06-01-031959.png"}},[e("img",{attrs:{src:"/notes/assets/reactIloveDeveplo/2019-06-01-031959.png",alt:"源代码"}})])]),t._v(" "),e("p",[t._v("假如 "),e("code",[t._v("originalStartTimeMs")]),t._v(" 为 "),e("code",[t._v("2500")]),t._v("，当前时间为 "),e("code",[t._v("5000")]),t._v("，那么算出来的差值就是 "),e("code",[t._v("2500")]),t._v("，也就是说当前距离 React 应用初始化已经过去了 2500 毫秒，最后通过公式得出的结果为：")]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("currentTime "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1073741822")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2500")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1073741572")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("接下来是计算 "),e("code",[t._v("expirationTime")]),t._v("，"),e("strong",[t._v("这个时间和优先级有关，值越大，优先级越高")]),t._v("。并且同步是优先级最高的，它的值为 "),e("code",[t._v("1073741823")]),t._v("，也就是之前看到的常量 "),e("code",[t._v("MAGIC_NUMBER_OFFSET")]),t._v(" 加一。")]),t._v(" "),e("p",[t._v("在 "),e("code",[t._v("computeExpirationForFiber")]),t._v(" 函数中存在很多分支，但是计算的核心就只有三行代码，分别是：")]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 同步")]),t._v("\nexpirationTime "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Sync\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 交互事件，优先级较高")]),t._v("\nexpirationTime "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("computeInteractiveExpiration")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("currentTime"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 异步，优先级较低")]),t._v("\nexpirationTime "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("computeAsyncExpiration")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("currentTime"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br")])]),e("p",[t._v("接下来就来分析 "),e("code",[t._v("computeInteractiveExpiration")]),t._v(" 函数内部是如何计算时间的，当然 "),e("code",[t._v("computeAsyncExpiration")]),t._v(" 计算时间的方式也是相同的，无非更换了两个变量。")]),t._v(" "),e("p",[e("a",{attrs:{"data-fancybox":"",title:"源代码",href:"/notes/assets/reactIloveDeveplo/2019-06-01-032001.png"}},[e("img",{attrs:{src:"/notes/assets/reactIloveDeveplo/2019-06-01-032001.png",alt:"源代码"}})])]),t._v(" "),e("p",[t._v("以上这些代码其实就是公式，把具体的值代入就能算出结果了。")]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("time "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1073741822")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1073741822")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1073741572")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1073741552")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("另外在 "),e("code",[t._v("ceiling")]),t._v(" 函数中的 "),e("code",[t._v("1 * bucketSizeMs / UNIT_SIZE")]),t._v(" 是为了抹平一段时间内的时间差，在抹平的时间差内不管有多少个任务需要执行，他们的过期时间都是同一个，这也算是一个性能优化，帮助渲染页面行为节流。")]),t._v(" "),e("p",[t._v("最后其实这个计算出来的 "),e("code",[t._v("expirationTime")]),t._v(" 是可以反推出另外一个时间的：")]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("expirationTimeToMs")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("expirationTime"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" ExpirationTime")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" number "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MAGIC_NUMBER_OFFSET")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" expirationTime"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("UNIT_SIZE")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br")])]),e("p",[t._v("如果将之前计算出来的 "),e("code",[t._v("expirationTime")]),t._v(" 代入以上代码，得出的结果如下：")]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1073741822")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1073741552")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2700")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("这个时间其实和之前在上文中计算出来的 "),e("code",[t._v("2500")]),t._v(" 毫秒差值很接近。因为 "),e("code",[t._v("expirationTime")]),t._v(" 指的就是一个任务的过期时间，React 根据任务的优先级和当前时间来计算出一个任务的执行截止时间。只要这个值比当前时间大就可以一直让 React 延后这个任务的执行，以便让更高优先级的任务执行，但是一旦过了任务的截止时间，就必须让这个任务马上执行。")]),t._v(" "),e("p",[t._v("这部分的内容一直在算来算去，看起来可能有点头疼。当然如果你嫌麻烦，只需要记住任务的过期时间是通过当前时间加上一个常量（任务优先级不同常量不同）计算出来的。")]),t._v(" "),e("p",[t._v("另外其实你还可以在后面的代码中看到更加直观且简单的计算过期时间的方式，但是目前那部分代码还没有被使用起来。")]),t._v(" "),e("h2",{attrs:{id:"schedulerootupdate"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#schedulerootupdate"}},[t._v("#")]),t._v(" "),e("strong",[t._v("scheduleRootUpdate")])]),t._v(" "),e("p",[t._v("当计算出时间以后就会调用 "),e("code",[t._v("updateContainerAtExpirationTime")]),t._v("，这个函数其实没有什么好解析的，直接进入 "),e("code",[t._v("scheduleRootUpdate")]),t._v(" 函数就好。")]),t._v(" "),e("p",[e("a",{attrs:{"data-fancybox":"",title:"源代码",href:"/notes/assets/reactIloveDeveplo/2019-06-01-032002.png"}},[e("img",{attrs:{src:"/notes/assets/reactIloveDeveplo/2019-06-01-032002.png",alt:"源代码"}})])]),t._v(" "),e("p",[t._v("首先会创建一个 "),e("code",[t._v("update")]),t._v("，"),e("strong",[t._v("这个对象和 "),e("code",[t._v("setState")]),t._v(" 息息相关")])]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// update 对象的内部属性")]),t._v("\nexpirationTime"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" expirationTime"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\ntag"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" UpdateState"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// setState 的第一二个参数")]),t._v("\npayload"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\ncallback"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 用于在队列中找到下一个节点")]),t._v("\nnext"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nnextEffect"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br")])]),e("p",[t._v("对于 "),e("code",[t._v("update")]),t._v(" 对象内部的属性来说，需要重点关注的是 "),e("code",[t._v("next")]),t._v(" 属性。因为 "),e("code",[t._v("update")]),t._v(" 其实就是一个队列中的节点，这个属性可以用于帮助寻找下一个 "),e("code",[t._v("update")]),t._v("。对于批量更新来说，可能会创建多个 "),e("code",[t._v("update")]),t._v("，因此需要将这些 "),e("code",[t._v("update")]),t._v(" 串联并存储起来，在必要的时候拿出来用于更新 "),e("code",[t._v("state")]),t._v("。")]),t._v(" "),e("p",[t._v("在 "),e("code",[t._v("render")]),t._v(" 的过程中其实也是一次更新的操作，但是并没有 "),e("code",[t._v("setState")]),t._v("，因此就把 "),e("code",[t._v("payload")]),t._v(" 赋值为 "),e("code",[t._v("{element}")]),t._v(" 了。")]),t._v(" "),e("p",[t._v("接下来将 "),e("code",[t._v("callback")]),t._v(" 赋值给 "),e("code",[t._v("update")]),t._v(" 的属性，这里的 "),e("code",[t._v("callback")]),t._v(" 还是 "),e("code",[t._v("ReactDom.render")]),t._v(" 的第三个参数。")]),t._v(" "),e("p",[t._v("然后将刚才创建出来的 "),e("code",[t._v("update")]),t._v(" 对象插入队列中，"),e("code",[t._v("enqueueUpdate")]),t._v(" 函数内部分支较多且代码简单，这里就不再贴出代码了，有兴趣的可以自行阅读。函数核心作用就是创建或者获取一个队列，然后把 "),e("code",[t._v("update")]),t._v(" 对象入队。")]),t._v(" "),e("p",[t._v("最后调用 "),e("code",[t._v("scheduleWork")]),t._v(" 函数，这里开始就是调度相关的内容，这部分内容将在下一篇文章中来详细解析。")]),t._v(" "),e("h2",{attrs:{id:"总结-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结-2"}},[t._v("#")]),t._v(" "),e("strong",[t._v("总结")])]),t._v(" "),e("p",[e("a",{attrs:{"data-fancybox":"",title:"总结流程图",href:"/notes/assets/reactIloveDeveplo/2019-06-01-032003.png"}},[e("img",{attrs:{src:"/notes/assets/reactIloveDeveplo/2019-06-01-032003.png",alt:"总结流程图"}})])])])}),[],!1,null,null,null);s.default=n.exports}}]);