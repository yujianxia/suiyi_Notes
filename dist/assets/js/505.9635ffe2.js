(window.webpackJsonp=window.webpackJsonp||[]).push([[505],{867:function(t,s,n){"use strict";n.r(s);var a=n(25),e=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"vue-的-diff-算法解析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vue-的-diff-算法解析"}},[t._v("#")]),t._v(" "),n("strong",[t._v("Vue 的 diff 算法解析")])]),t._v(" "),n("hr"),t._v(" "),n("h2",{attrs:{id:"_1-序言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-序言"}},[t._v("#")]),t._v(" "),n("strong",[t._v("1.序言")])]),t._v(" "),n("p",[t._v("diff 算法是一种通过同层的树节点进行比较的高效算法，避免了对树进行逐层搜索遍历，所以时间复杂度只有 O(n)。diff 算法的在很多场景下都有应用，例如在 vue 虚拟 dom 渲染成真实 dom 的新旧 VNode 节点比较更新时，就用到了该算法。")]),t._v(" "),n("p",[n("strong",[t._v("diff 算法有两个比较显著的特点：")])]),t._v(" "),n("ul",[n("li",[n("em",[n("strong",[t._v("比较只会在同层级进行, 不会跨层级比较。")])])])]),t._v(" "),n("p",[n("a",{attrs:{"data-fancybox":"",title:"diff层级示例图",href:"https://static001.infoq.cn/resource/image/91/54/91e9c9519a11caa0c5bf70714383f054.png"}},[n("img",{attrs:{src:"https://static001.infoq.cn/resource/image/91/54/91e9c9519a11caa0c5bf70714383f054.png",alt:"diff层级示例图"}})])]),t._v(" "),n("ul",[n("li",[n("em",[n("strong",[t._v("在 diff 比较的过程中，循环从两边向中间收拢。")])])])]),t._v(" "),n("p",[n("a",{attrs:{"data-fancybox":"",title:"diff算法方向示例图",href:"https://static001.infoq.cn/resource/image/2d/ec/2dcd6ad5cf82c65b9cfc43a27ba1e4ec.png"}},[n("img",{attrs:{src:"https://static001.infoq.cn/resource/image/2d/ec/2dcd6ad5cf82c65b9cfc43a27ba1e4ec.png",alt:"diff算法方向示例图"}})])]),t._v(" "),n("h2",{attrs:{id:"_2-diff-流程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-diff-流程"}},[t._v("#")]),t._v(" "),n("strong",[t._v("2. diff 流程")])]),t._v(" "),n("p",[t._v("下面把整个 diff 流程拆成三步来具体分析：")]),t._v(" "),n("ul",[n("li",[n("em",[n("strong",[t._v("第一步")])])])]),t._v(" "),n("p",[t._v("vue 的虚拟 dom 渲染真实 dom 的过程中首先会对新老 VNode 的开始和结束位置进行标记："),n("code",[t._v("oldStartIdx")]),t._v("、"),n("code",[t._v("oldEndIdx")]),t._v("、"),n("code",[t._v("newStartIdx")]),t._v("、"),n("code",[t._v("newEndIdx")]),t._v("。")]),t._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" oldStartIdx "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 旧节点开始下标")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" newStartIdx "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 新节点开始下标")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" oldEndIdx "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" oldCh"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 旧节点结束下标")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" oldStartVnode "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" oldCh"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 旧节点开始 vnode")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" oldEndVnode "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" oldCh"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("oldEndIdx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 旧节点结束 vnode")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" newEndIdx "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" newCh"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 新节点结束下标")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" newStartVnode "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" newCh"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 新节点开始 vnode")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" newEndVnode "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" newCh"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("newEndIdx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 新节点结束 vnode")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br")])]),n("p",[t._v("经过第一步之后，初始的新旧 VNode 节点如下图所示：")]),t._v(" "),n("p",[n("a",{attrs:{"data-fancybox":"",title:"VNode示例图",href:"https://static001.infoq.cn/resource/image/80/6d/80dc339f73b186479e6d1fc18bfbf66d.png"}},[n("img",{attrs:{src:"https://static001.infoq.cn/resource/image/80/6d/80dc339f73b186479e6d1fc18bfbf66d.png",alt:"VNode示例图"}})])]),t._v(" "),n("ul",[n("li",[n("p",[n("em",[n("strong",[t._v("第二步")])])]),t._v(" "),n("p",[t._v("标记好节点位置之后，就开始进入到的 "),n("code",[t._v("while")]),t._v(" 循环处理中，这里是 "),n("code",[t._v("diff")]),t._v(" 算法的核心流程，分情况进行了新老节点的比较并移动对应的 "),n("code",[t._v("VNode")]),t._v(" 节点。"),n("code",[t._v("while 循环的退出条件是直到老节点或者新节点的开始位置大于结束位置。")])]),t._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldStartIdx "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" oldEndIdx "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" newStartIdx "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" newEndIdx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 处理逻辑")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br")])]),n("p",[t._v("接下来具体介绍 "),n("code",[t._v("while")]),t._v(" 循环中的处理逻辑， 循环过程中首先对新老 "),n("code",[t._v("VNode")]),t._v(" 节点的头尾进行比较，寻找相同节点，如果有相同节点满足 "),n("code",[t._v("sameVnode")]),t._v("（可以复用的相同节点） 则直接进行 "),n("code",[t._v("patchVnode")]),t._v(" (该方法进行节点复用处理)，并且根据具体情形，移动新老节点的 "),n("code",[t._v("VNode")]),t._v(" 索引，以便进入下一次循环处理，一共有 2 * 2 = 4 种情形。下面根据代码展开分析:")]),t._v(" "),n("ul",[n("li",[n("em",[n("strong",[t._v("情形一")])]),t._v("：当新老 "),n("code",[t._v("VNode")]),t._v(" 节点的 "),n("code",[t._v("start")]),t._v(" 满足 "),n("code",[t._v("sameVnode")]),t._v(" 时，直接 "),n("code",[t._v("patchVnode")]),t._v(" 即可，同时新老 "),n("code",[t._v("VNode")]),t._v(" 节点的开始索引都加 1。")])]),t._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("sameVnode")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldStartVnode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newStartVnode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("patchVnode")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldStartVnode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newStartVnode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" insertedVnodeQueue"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newCh"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newStartIdx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    oldStartVnode "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" oldCh"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("oldStartIdx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    newStartVnode "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" newCh"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("newStartIdx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br")])]),n("ul",[n("li",[n("em",[n("strong",[t._v("情形二")])]),t._v("：当新老 "),n("code",[t._v("VNode")]),t._v(" 节点的 end 满足 "),n("code",[t._v("sameVnode")]),t._v(" 时，同样直接 "),n("code",[t._v("patchVnode")]),t._v(" 即可，同时新老 "),n("code",[t._v("VNode")]),t._v(" 节点的结束索引都减 1。")])]),t._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("sameVnode")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldEndVnode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newEndVnode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("patchVnode")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldEndVnode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newEndVnode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" insertedVnodeQueue"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newCh"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newEndIdx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    oldEndVnode "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" oldCh"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("oldEndIdx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    newEndVnode "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" newCh"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("newEndIdx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br")])]),n("ul",[n("li",[n("em",[n("strong",[t._v("情形三")])]),t._v("：当老 "),n("code",[t._v("VNode")]),t._v(" 节点的 "),n("code",[t._v("start")]),t._v(" 和新 "),n("code",[t._v("VNode")]),t._v(" 节点的 "),n("code",[t._v("end")]),t._v(" 满足 "),n("code",[t._v("sameVnode")]),t._v(" 时，这说明这次数据更新后 "),n("code",[t._v("oldStartVnode")]),t._v(" 已经跑到了 "),n("code",[t._v("oldEndVnode")]),t._v(" 后面去了。这时候在 "),n("code",[t._v("patchVnode")]),t._v(" 后，还需要将当前真实 "),n("code",[t._v("dom")]),t._v(" 节点移动到 "),n("code",[t._v("oldEndVnode")]),t._v(" 的后面，同时老 "),n("code",[t._v("VNode")]),t._v(" 节点开始索引加 1，新 "),n("code",[t._v("VNode")]),t._v(" 节点的结束索引减 1。")])]),t._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("sameVnode")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldStartVnode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newEndVnode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Vnode moved right")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("patchVnode")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldStartVnode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newEndVnode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" insertedVnodeQueue"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newCh"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newEndIdx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    canMove "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" nodeOps"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("insertBefore")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parentElm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" oldStartVnode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("elm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nodeOps"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("nextSibling")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldEndVnode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("elm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    oldStartVnode "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" oldCh"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("oldStartIdx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    newEndVnode "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" newCh"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("newEndIdx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br")])]),n("ul",[n("li",[n("em",[n("strong",[t._v("情形四")])]),t._v("：当老 "),n("code",[t._v("VNode")]),t._v(" 节点的 "),n("code",[t._v("end")]),t._v(" 和新 "),n("code",[t._v("VNode")]),t._v(" 节点的 "),n("code",[t._v("start")]),t._v(" 满足 "),n("code",[t._v("sameVnode")]),t._v(" 时，这说明这次数据更新后 "),n("code",[t._v("oldEndVnode")]),t._v(" 跑到了 "),n("code",[t._v("oldStartVnode")]),t._v(" 的前面去了。这时候在 "),n("code",[t._v("patchVnode")]),t._v(" 后，还需要将当前真实 "),n("code",[t._v("dom")]),t._v(" 节点移动到 "),n("code",[t._v("oldStartVnode")]),t._v(" 的前面，同时老 "),n("code",[t._v("VNode")]),t._v(" 节点结束索引减 1，新 "),n("code",[t._v("VNode")]),t._v(" 节点的开始索引加 1。")])]),t._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("patchVnode")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldEndVnode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newStartVnode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" insertedVnodeQueue"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newCh"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newStartIdx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    canMove "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" nodeOps"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("insertBefore")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parentElm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" oldEndVnode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("elm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" oldStartVnode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("elm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    oldEndVnode "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" oldCh"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("oldEndIdx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    newStartVnode "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" newCh"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("newStartIdx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br")])])])]),t._v(" "),n("p",[t._v("**如果都不满足以上四种情形，那说明没有相同的节点可以复用。**于是则通过查找事先建立好的以旧的 "),n("code",[t._v("VNode")]),t._v(" 为 "),n("code",[t._v("key")]),t._v(" 值，对应 "),n("code",[t._v("index")]),t._v(" 序列为 "),n("code",[t._v("value")]),t._v(" 值的哈希表。从这个哈希表中找到与 "),n("code",[t._v("newStartVnode")]),t._v(" 一致 "),n("code",[t._v("key")]),t._v(" 的旧的 "),n("code",[t._v("VNode")]),t._v(" 节点，如果两者满足 "),n("code",[t._v("sameVnode")]),t._v(" 的条件，在进行 "),n("code",[t._v("patchVnode")]),t._v(" 的同时会将这个真实 "),n("code",[t._v("dom")]),t._v(" 移动到 "),n("code",[t._v("oldStartVnode")]),t._v(" 对应的真实 "),n("code",[t._v("dom")]),t._v(" 的前面；如果没有找到，则说明当前索引下的新的 "),n("code",[t._v("VNode")]),t._v(" 节点在旧的 "),n("code",[t._v("VNode")]),t._v(" 队列中不存在，无法进行节点的复用，那么就只能调用 "),n("code",[t._v("createElm")]),t._v(" 创建一个新的 "),n("code",[t._v("dom")]),t._v(" 节点放到当前 "),n("code",[t._v("newStartIdx")]),t._v(" 的位置。")]),t._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 没有找到相同的可以复用的节点，则新建节点处理")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 生成一个 key 与旧 VNode 的 key 对应的哈希表（只有第一次进来 undefined 的时候会生成，也为后面检测重复的 key 值做铺垫） 比如 childre 是这样的 [{xx: xx, key: 'key0'}, {xx: xx, key: 'key1'}, {xx: xx, key: 'key2'}] beginIdx = 0 endIdx = 2 结果生成{key0: 0, key1: 1, key2: 2} */")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("isUndef")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldKeyToIdx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" oldKeyToIdx "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("createKeyToOldIdx")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldCh"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" oldStartIdx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" oldEndIdx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 如果 newStartVnode 新的 VNode 节点存在 key 并且这个 key 在 oldVnode 中能找到则返回这个节点的 idxInOld（即第几个节点，下标）*/")]),t._v("\n    idxInOld "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("isDef")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newStartVnode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" oldKeyToIdx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("newStartVnode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("findIdxInOld")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newStartVnode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" oldCh"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" oldStartIdx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" oldEndIdx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("isUndef")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("idxInOld"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// New element")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*newStartVnode 没有 key 或者是该 key 没有在老节点中找到则创建一个新的节点 */")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("createElm")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newStartVnode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" insertedVnodeQueue"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" parentElm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" oldStartVnode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("elm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newCh"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newStartIdx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 获取同 key 的老节点 */")]),t._v("\n        vnodeToMove "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" oldCh"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("idxInOld"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("sameVnode")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vnodeToMove"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newStartVnode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 如果新 VNode 与得到的有相同 key 的节点是同一个 VNode 则进行 patchVnode*/")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("patchVnode")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vnodeToMove"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newStartVnode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" insertedVnodeQueue"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newCh"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newStartIdx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 因为已经 patchVnode 进去了，所以将这个老节点赋值 undefined")]),t._v("\n            oldCh"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("idxInOld"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 当有标识位 canMove 实可以直接插入 oldStartVnode 对应的真实 Dom 节点前面 */")]),t._v("\n            canMove "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" nodeOps"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("insertBefore")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parentElm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vnodeToMove"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("elm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" oldStartVnode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("elm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// same key but different element. treat as new element")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 当新的 VNode 与找到的同样 key 的 VNode 不是 sameVNode 的时候（比如说 tag 不一样或者是有不一样 type 的 input 标签），创建一个新的节点 */")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("createElm")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newStartVnode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" insertedVnodeQueue"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" parentElm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" oldStartVnode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("elm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newCh"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newStartIdx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    newStartVnode "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" newCh"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("newStartIdx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br"),n("span",{staticClass:"line-number"},[t._v("23")]),n("br"),n("span",{staticClass:"line-number"},[t._v("24")]),n("br"),n("span",{staticClass:"line-number"},[t._v("25")]),n("br"),n("span",{staticClass:"line-number"},[t._v("26")]),n("br"),n("span",{staticClass:"line-number"},[t._v("27")]),n("br"),n("span",{staticClass:"line-number"},[t._v("28")]),n("br")])]),n("p",[t._v("再来看的实例，"),n("strong",[t._v("第一次循环")]),t._v("后，找到了旧节点的末尾和新节点的开头 (都是 D) 相同，于是直接复用 D 节点作为 diff 后创建的第一个真实节点。同时旧节点的 "),n("code",[t._v("endIndex")]),t._v(" 移动到了 C，新节点的 "),n("code",[t._v("startIndex")]),t._v(" 移动到了 C。")]),t._v(" "),n("p",[n("a",{attrs:{"data-fancybox":"",title:"第一次示例图",href:"https://static001.infoq.cn/resource/image/76/54/76032c78c8ef74047efd42c070e48854.png"}},[n("img",{attrs:{src:"https://static001.infoq.cn/resource/image/76/54/76032c78c8ef74047efd42c070e48854.png",alt:"第一次示例图"}})])]),t._v(" "),n("p",[t._v("紧接着开始第二次循环，"),n("strong",[t._v("第二次循环")]),t._v("后，同样是旧节点的末尾和新节点的开头 (都是 C) 相同，同理，diff 后创建了 C 的真实节点插入到第一次创建的 B 节点后面。同时旧节点的 "),n("code",[t._v("endIndex")]),t._v(" 移动到了 B，新节点的 "),n("code",[t._v("startIndex")]),t._v(" 移动到了 E。")]),t._v(" "),n("p",[n("a",{attrs:{"data-fancybox":"",title:"第二次示例图",href:"https://static001.infoq.cn/resource/image/1c/d7/1c76e7489660188d35f0a38ea8c8ecd7.png"}},[n("img",{attrs:{src:"https://static001.infoq.cn/resource/image/1c/d7/1c76e7489660188d35f0a38ea8c8ecd7.png",alt:"第二次示例图"}})])]),t._v(" "),n("p",[t._v("接下来"),n("strong",[t._v("第三次循环")]),t._v("中，发现 patchVnode 的 4 种情形都不符合，于是在旧节点队列中查找当前的新节点 E，结果发现没有找到，这时候只能直接创建新的真实节点 E，插入到第二次创建的 C 节点之后。同时新节点的 "),n("code",[t._v("startIndex")]),t._v(" 移动到了 A。旧节点的 "),n("code",[t._v("startIndex")]),t._v(" 和 "),n("code",[t._v("endIndex")]),t._v(" 都保持不动。")]),t._v(" "),n("p",[n("a",{attrs:{"data-fancybox":"",title:"第三次示例图",href:"https://static001.infoq.cn/resource/image/4b/08/4b622c0d61673ec5474465d82305d308.png"}},[n("img",{attrs:{src:"https://static001.infoq.cn/resource/image/4b/08/4b622c0d61673ec5474465d82305d308.png",alt:"第三次示例图"}})])]),t._v(" "),n("p",[n("strong",[t._v("第四次循环")]),t._v("中，发现了新旧节点的开头 (都是 A) 相同，于是 diff 后创建了 A 的真实节点，插入到前一次创建的 E 节点后面。同时旧节点的 "),n("code",[t._v("startIndex")]),t._v(" 移动到了 B，新节点的 "),n("code",[t._v("startIndex")]),t._v(" 移动到了 B。")]),t._v(" "),n("p",[n("a",{attrs:{"data-fancybox":"",title:"第四次示例图",href:"https://static001.infoq.cn/resource/image/59/b4/5982417c3e0b2fa9ae940354a0e67ab4.png"}},[n("img",{attrs:{src:"https://static001.infoq.cn/resource/image/59/b4/5982417c3e0b2fa9ae940354a0e67ab4.png",alt:"第四次示例图"}})])]),t._v(" "),n("p",[n("strong",[t._v("第五次循环")]),t._v("中，情形同第四次循环一样，因此 diff 后创建了 B 真实节点 插入到前一次创建的 A 节点后面。同时旧节点的 "),n("code",[t._v("startIndex")]),t._v(" 移动到了 C，新节点的 "),n("code",[t._v("startIndex")]),t._v(" 移动到了 F。")]),t._v(" "),n("p",[n("a",{attrs:{"data-fancybox":"",title:"第五次示例图",href:"https://static001.infoq.cn/resource/image/16/86/16cf0ef90f6e19d26c0ddffeca067e86.png"}},[n("img",{attrs:{src:"https://static001.infoq.cn/resource/image/16/86/16cf0ef90f6e19d26c0ddffeca067e86.png",alt:"第五次示例图"}})])]),t._v(" "),n("p",[t._v("这时候发现新节点的 "),n("code",[t._v("startIndex")]),t._v(" 已经大于 "),n("code",[t._v("endIndex")]),t._v(" 了。不再满足循环的条件了。因此结束循环，接下来走后面的逻辑。")]),t._v(" "),n("ul",[n("li",[n("em",[n("strong",[t._v("第三步")])])])]),t._v(" "),n("p",[n("code",[t._v("当 while 循环结束后，根据新老节点的数目不同，做相应的节点添加或者删除。若新节点数目大于老节点则需要把多出来的节点创建出来加入到真实 dom 中，反之若老节点数目大于新节点则需要把多出来的老节点从真实 dom 中删除。")]),t._v("至此整个 diff 过程就已经全部完成了。")]),t._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldStartIdx "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" oldEndIdx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 全部比较完成以后，发现 oldStartIdx > oldEndIdx 的话，说明老节点已经遍历完了，新节点比老节点多， 所以这时候多出来的新节点需要一个一个创建出来加入到真实 Dom 中 */")]),t._v("\n    refElm "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("isUndef")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newCh"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("newEndIdx "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" newCh"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("newEndIdx "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("elm\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("addVnodes")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parentElm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" refElm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newCh"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newStartIdx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newEndIdx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" insertedVnodeQueue"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建 newStartIdx - newEndIdx 之间的所有节点")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newStartIdx "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" newEndIdx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 如果全部比较完成以后发现 newStartIdx > newEndIdx，则说明新节点已经遍历完了，老节点多于新节点，这个时候需要将多余的老节点从真实 Dom 中移除 */")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("removeVnodes")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldCh"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" oldStartIdx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" oldEndIdx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 移除 oldStartIdx - oldEndIdx 之间的所有节点")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br")])]),n("p",[t._v("再回过头看的实例，新节点的数目大于旧节点，需要创建 "),n("code",[t._v("newStartIdx")]),t._v(" 和 "),n("code",[t._v("newEndIdx")]),t._v(" 之间的所有节点。在的实例中就是节点 F，因此直接创建 F 节点对应的真实节点放到 B 节点后面即可。")]),t._v(" "),n("p",[n("a",{attrs:{"data-fancybox":"",title:"第六次示例图",href:"https://static001.infoq.cn/resource/image/dc/ad/dc215b45682cf6c9cc4700a5425673ad.png"}},[n("img",{attrs:{src:"https://static001.infoq.cn/resource/image/dc/ad/dc215b45682cf6c9cc4700a5425673ad.png",alt:"第六次示例图"}})])]),t._v(" "),n("h2",{attrs:{id:"总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" "),n("strong",[t._v("总结")])]),t._v(" "),n("ul",[n("li",[n("p",[t._v("首先，对比节点本身，判断是否为同一节点，如果不为相同节点，则删除该节点重新创建节点进行替换")])]),t._v(" "),n("li",[n("p",[t._v("如果为相同节点，进行"),n("code",[t._v("patchVnode")]),t._v("，判断如何对该节点的子节点进行处理，先判断一方有子节点一方没有子节点的情况(如果新的"),n("code",[t._v("children")]),t._v("没有子节点，将旧的子节点移除)")])]),t._v(" "),n("li",[n("p",[t._v("比较如果都有子节点，则进行"),n("code",[t._v("updateChildren")]),t._v("，判断如何对这些新老节点的子节点进行操作（"),n("code",[t._v("diff")]),t._v("核心）。")])]),t._v(" "),n("li",[n("p",[t._v("匹配时，找到相同的子节点，递归比较子节点")])])]),t._v(" "),n("p",[t._v("在"),n("code",[t._v("diff")]),t._v("中，只对同层的子节点进行比较，放弃跨级的节点比较，使得时间复杂从"),n("code",[t._v("O(n^3)")]),t._v("降低值"),n("code",[t._v("O(n)")]),t._v("，也就是说，只有当新旧"),n("code",[t._v("children")]),t._v("都为多个子节点时才需要用核心的"),n("code",[t._v("Diff")]),t._v("算法进行同层级比较。")])])}),[],!1,null,null,null);s.default=e.exports}}]);